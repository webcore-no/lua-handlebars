#!/bin/luajit
local handlebars = require("lib.handlebars")
local cjson = require("cjson.safe")
local err_printf = require("lib.handlebars.util").err_printf


local function read_file(path)
   if path == nil then return nil end

   local file, data, err
   file, err = io.open(path, 'r+')
   if not file then
      err_printf(err)
      return nil
   end

   data, err = file:read('*all')
   if not data then
      err_printf(err)
      return nil
   end
   return data
end

local arguments = {
}

for i, v in ipairs(arg) do
      local m = v:match("[-][-](.*)")
      if m then
         arguments[m] = arg[i+1]
      end
end

local helpers
if arguments.helpers then
   helpers = io.open(arguments.helpers .. ".lua", 'r+')
   if helpers then
      helpers = require(arguments.helpers)
   end
else
   arguments.helpers = nil
end

local handlebarsc = handlebars.new(helpers and arguments.helpers, helpers)

local template, err = handlebarsc:compile_template_file(arguments.input)

if not template then
   err_printf("Failed to generate template: %s", err)
   return 1
end

local data
data = read_file(arguments.variables)
if data then
   if arguments.variables:match(".*.lua") then
      -- err_printf(data)
      data, err = loadstring(data)
      if err ~= nil then
         err_printf("error: %s", err)
         return nil
      end
      data = data()
   else
      data, err = cjson.decode(data)
      if not data then
         err_printf(err)
         return
      end
   end
end
print(template(data))
